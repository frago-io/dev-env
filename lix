# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      /home/horus/frio/nixos.nix
    ];
  #choose a specific version of linux because of error of rosseta
  boot.kernelPackages = pkgs.linuxPackages_latest;
  #enable roseta virtualiation
  #################################################################################
  boot.initrd.availableKernelModules = [ "virtiofs" ];
  fileSystems."/run/rosetta" = {
    device = "rosetta";
    fsType = "virtiofs";
  };
  fileSystems."/home/horus/share" = {
    device = "share";
    fsType = "virtiofs";
  };
  nix.settings.extra-platforms = [ "x86_64-linux" ];
  nix.settings.extra-sandbox-paths = [ "/run/rosetta" "/run/binfmt" ];
  boot.binfmt.registrations."rosetta" = { # based on https://developer.apple.com/documentation/virtualization/running_intel_binaries_in_linux_vms_with_rosetta#3978495
    interpreter = "/run/rosetta/rosetta";
    fixBinary = true;
    wrapInterpreterInShell = false;
    matchCredentials = true;
    magicOrExtension = ''\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x3e\x00'';
    mask = ''\xff\xff\xff\xff\xff\xfe\xfe\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff'';
  };
  #################################################################################
  #DOCKER
  virtualisation.docker.enable = true;
  virtualisation.docker.extraOptions = ''
    --experimental
  '';
  #FLAKES
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  nixpkgs.config.allowUnfree = true;
  
  nix.settings = {
    trusted-users = [ "root" "horus" ];
    trusted-substituters = [ "https://cache.nixos.org/" "https://cache.iog.io" ];
    substituters = [ "https://cache.nixos.org/" "https://cache.iog.io" ];
    trusted-public-keys =  [ "iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=" "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=" ];
    allow-import-from-derivation = true;
    allowed-impure-host-deps = true;
  };

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "lix"; # Define your hostname.
  # Pick only one of the below networking options.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  # networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.

  # Set your time zone.
  # time.timeZone = "Europe/Amsterdam";

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  #   useXkbConfig = true; # use xkbOptions in tty.
  # };

  # Enable the X11 windowing system. #############################################
  services.xserver = {
   enable = true;
   desktopManager = {
     xterm.enable = false;
     xfce = {
       enable = true;
       noDesktop = true;
       enableXfwm = false;
     };
   };
   displayManager = {
    defaultSession = "xfce+i3";
    #sessionCommands = ''
         #${pkgs.xorg.xrandr}/bin/xrandr -s '1920x1080'
       #'';
   };
   windowManager.i3 = {
     enable = true;
     extraPackages = with pkgs; [
       dmenu
       i3status
       i3lock
       i3blocks
     ];
   };
  };
  #services.xserver.enable = true;
  #services.xserver.displayManager.gdm.enable = true;
  #services.xserver.desktopManager.gnome.enable = true;
  #environment.gnome.excludePackages = (with pkgs; [
    #gnome-photos
    #gnome-tour
  #]) ++ (with pkgs.gnome; [
    #cheese # webcam tool
    #gnome-music
    #gnome-terminal
    #gedit # text editor
    #epiphany # web browser
    #geary # email reader
    #evince # document viewer
    #gnome-characters
    #totem # video player
    #tali # poker game
    #iagno # go game
    #hitori # sudoku game
    #atomix # puzzle game
  #]);
  # this seem not having any effect in gnome
  services.xserver.libinput.touchpad.naturalScrolling = true;


  # Configure keymap in X11
  services.xserver.layout = "us";
  # services.xserver.xkbOptions = {
  #   "eurosign:e";
  #   "caps:escape" # map caps to escape.
  # };

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  # sound.enable = true;
  # hardware.pulseaudio.enable = true;

  # Enable touchpad support (enabled default in most desktopManager).
  services.xserver.libinput.enable = true;



  # Define a user account. Don't forget to set a password with ‘passwd’.
   users.users.horus = {
     isNormalUser = true;
     extraGroups = [ "wheel" "docker" ]; # Enable ‘sudo’ for the user.
     shell = pkgs.zsh;
     packages = with pkgs; [
       #firefox
     ];
   };

  # Enable sudo extra rules as NOPASSWD
  security.sudo.extraRules= [
    {  users = [ "horus" ];
      commands = [
         { command = "ALL" ;
           options= [ "NOPASSWD" ]; # "SETENV" # Adding the following could be a good idea
        }
      ];
    }
  ];
  # List packages installed in system profile. To search, run:
  # $ nix search wget
    environment.systemPackages = with pkgs; [
     vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
     wget
     git
     neovim
     file
     xclip
     gnumake
    ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.zsh.enable = true;
  programs.ssh.startAgent = true;
  programs.gnupg.agent = {
     enable = true;
     #enableSSHSupport = true;
   };
  programs.nix-ld.enable = true;

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
    services.openssh.enable = true;
    # depircated propertye
    # services.openssh.forwardX11 = true;
    # use instead:
    services.openssh.settings.X11Forwarding = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  networking.firewall.enable = false;

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  # system.copySystemConfiguration = true;

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It’s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "23.05"; # Did you read the comment?

}

